// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/pb/book.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookGRPCHandlerClient is the client API for BookGRPCHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookGRPCHandlerClient interface {
	Fetch(ctx context.Context, in *BookIDModel, opts ...grpc.CallOption) (*BookRowsResponse, error)
	Show(ctx context.Context, in *BookIDModel, opts ...grpc.CallOption) (*BookRowResponse, error)
	Store(ctx context.Context, in *BookAddRequest, opts ...grpc.CallOption) (*BookBoolResponse, error)
	Update(ctx context.Context, in *BookModel, opts ...grpc.CallOption) (*BookBoolResponse, error)
	Destroy(ctx context.Context, in *BookIDModel, opts ...grpc.CallOption) (*BookBoolResponse, error)
}

type bookGRPCHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewBookGRPCHandlerClient(cc grpc.ClientConnInterface) BookGRPCHandlerClient {
	return &bookGRPCHandlerClient{cc}
}

func (c *bookGRPCHandlerClient) Fetch(ctx context.Context, in *BookIDModel, opts ...grpc.CallOption) (*BookRowsResponse, error) {
	out := new(BookRowsResponse)
	err := c.cc.Invoke(ctx, "/proto.BookGRPCHandler/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookGRPCHandlerClient) Show(ctx context.Context, in *BookIDModel, opts ...grpc.CallOption) (*BookRowResponse, error) {
	out := new(BookRowResponse)
	err := c.cc.Invoke(ctx, "/proto.BookGRPCHandler/Show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookGRPCHandlerClient) Store(ctx context.Context, in *BookAddRequest, opts ...grpc.CallOption) (*BookBoolResponse, error) {
	out := new(BookBoolResponse)
	err := c.cc.Invoke(ctx, "/proto.BookGRPCHandler/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookGRPCHandlerClient) Update(ctx context.Context, in *BookModel, opts ...grpc.CallOption) (*BookBoolResponse, error) {
	out := new(BookBoolResponse)
	err := c.cc.Invoke(ctx, "/proto.BookGRPCHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookGRPCHandlerClient) Destroy(ctx context.Context, in *BookIDModel, opts ...grpc.CallOption) (*BookBoolResponse, error) {
	out := new(BookBoolResponse)
	err := c.cc.Invoke(ctx, "/proto.BookGRPCHandler/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookGRPCHandlerServer is the server API for BookGRPCHandler service.
// All implementations must embed UnimplementedBookGRPCHandlerServer
// for forward compatibility
type BookGRPCHandlerServer interface {
	Fetch(context.Context, *BookIDModel) (*BookRowsResponse, error)
	Show(context.Context, *BookIDModel) (*BookRowResponse, error)
	Store(context.Context, *BookAddRequest) (*BookBoolResponse, error)
	Update(context.Context, *BookModel) (*BookBoolResponse, error)
	Destroy(context.Context, *BookIDModel) (*BookBoolResponse, error)
	mustEmbedUnimplementedBookGRPCHandlerServer()
}

// UnimplementedBookGRPCHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedBookGRPCHandlerServer struct {
}

func (UnimplementedBookGRPCHandlerServer) Fetch(context.Context, *BookIDModel) (*BookRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedBookGRPCHandlerServer) Show(context.Context, *BookIDModel) (*BookRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedBookGRPCHandlerServer) Store(context.Context, *BookAddRequest) (*BookBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedBookGRPCHandlerServer) Update(context.Context, *BookModel) (*BookBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBookGRPCHandlerServer) Destroy(context.Context, *BookIDModel) (*BookBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedBookGRPCHandlerServer) mustEmbedUnimplementedBookGRPCHandlerServer() {}

// UnsafeBookGRPCHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookGRPCHandlerServer will
// result in compilation errors.
type UnsafeBookGRPCHandlerServer interface {
	mustEmbedUnimplementedBookGRPCHandlerServer()
}

func RegisterBookGRPCHandlerServer(s grpc.ServiceRegistrar, srv BookGRPCHandlerServer) {
	s.RegisterService(&BookGRPCHandler_ServiceDesc, srv)
}

func _BookGRPCHandler_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookIDModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookGRPCHandlerServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BookGRPCHandler/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookGRPCHandlerServer).Fetch(ctx, req.(*BookIDModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookGRPCHandler_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookIDModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookGRPCHandlerServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BookGRPCHandler/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookGRPCHandlerServer).Show(ctx, req.(*BookIDModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookGRPCHandler_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookGRPCHandlerServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BookGRPCHandler/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookGRPCHandlerServer).Store(ctx, req.(*BookAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookGRPCHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookGRPCHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BookGRPCHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookGRPCHandlerServer).Update(ctx, req.(*BookModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookGRPCHandler_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookIDModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookGRPCHandlerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BookGRPCHandler/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookGRPCHandlerServer).Destroy(ctx, req.(*BookIDModel))
	}
	return interceptor(ctx, in, info, handler)
}

// BookGRPCHandler_ServiceDesc is the grpc.ServiceDesc for BookGRPCHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookGRPCHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BookGRPCHandler",
	HandlerType: (*BookGRPCHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _BookGRPCHandler_Fetch_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _BookGRPCHandler_Show_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _BookGRPCHandler_Store_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BookGRPCHandler_Update_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _BookGRPCHandler_Destroy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/book.proto",
}
