// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/pb/store.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreGRPCHandlerClient is the client API for StoreGRPCHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreGRPCHandlerClient interface {
	Fetch(ctx context.Context, in *StoreEmptyRequest, opts ...grpc.CallOption) (*StoreRowsResponse, error)
	Show(ctx context.Context, in *StoreIDModel, opts ...grpc.CallOption) (*StoreRowResponse, error)
	Store(ctx context.Context, in *StoreNameModel, opts ...grpc.CallOption) (*StoreBoolResponse, error)
	Update(ctx context.Context, in *StoreModel, opts ...grpc.CallOption) (*StoreBoolResponse, error)
	Destroy(ctx context.Context, in *StoreIDModel, opts ...grpc.CallOption) (*StoreBoolResponse, error)
}

type storeGRPCHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreGRPCHandlerClient(cc grpc.ClientConnInterface) StoreGRPCHandlerClient {
	return &storeGRPCHandlerClient{cc}
}

func (c *storeGRPCHandlerClient) Fetch(ctx context.Context, in *StoreEmptyRequest, opts ...grpc.CallOption) (*StoreRowsResponse, error) {
	out := new(StoreRowsResponse)
	err := c.cc.Invoke(ctx, "/proto.StoreGRPCHandler/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeGRPCHandlerClient) Show(ctx context.Context, in *StoreIDModel, opts ...grpc.CallOption) (*StoreRowResponse, error) {
	out := new(StoreRowResponse)
	err := c.cc.Invoke(ctx, "/proto.StoreGRPCHandler/Show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeGRPCHandlerClient) Store(ctx context.Context, in *StoreNameModel, opts ...grpc.CallOption) (*StoreBoolResponse, error) {
	out := new(StoreBoolResponse)
	err := c.cc.Invoke(ctx, "/proto.StoreGRPCHandler/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeGRPCHandlerClient) Update(ctx context.Context, in *StoreModel, opts ...grpc.CallOption) (*StoreBoolResponse, error) {
	out := new(StoreBoolResponse)
	err := c.cc.Invoke(ctx, "/proto.StoreGRPCHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeGRPCHandlerClient) Destroy(ctx context.Context, in *StoreIDModel, opts ...grpc.CallOption) (*StoreBoolResponse, error) {
	out := new(StoreBoolResponse)
	err := c.cc.Invoke(ctx, "/proto.StoreGRPCHandler/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreGRPCHandlerServer is the server API for StoreGRPCHandler service.
// All implementations must embed UnimplementedStoreGRPCHandlerServer
// for forward compatibility
type StoreGRPCHandlerServer interface {
	Fetch(context.Context, *StoreEmptyRequest) (*StoreRowsResponse, error)
	Show(context.Context, *StoreIDModel) (*StoreRowResponse, error)
	Store(context.Context, *StoreNameModel) (*StoreBoolResponse, error)
	Update(context.Context, *StoreModel) (*StoreBoolResponse, error)
	Destroy(context.Context, *StoreIDModel) (*StoreBoolResponse, error)
	mustEmbedUnimplementedStoreGRPCHandlerServer()
}

// UnimplementedStoreGRPCHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedStoreGRPCHandlerServer struct {
}

func (UnimplementedStoreGRPCHandlerServer) Fetch(context.Context, *StoreEmptyRequest) (*StoreRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedStoreGRPCHandlerServer) Show(context.Context, *StoreIDModel) (*StoreRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedStoreGRPCHandlerServer) Store(context.Context, *StoreNameModel) (*StoreBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedStoreGRPCHandlerServer) Update(context.Context, *StoreModel) (*StoreBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStoreGRPCHandlerServer) Destroy(context.Context, *StoreIDModel) (*StoreBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedStoreGRPCHandlerServer) mustEmbedUnimplementedStoreGRPCHandlerServer() {}

// UnsafeStoreGRPCHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreGRPCHandlerServer will
// result in compilation errors.
type UnsafeStoreGRPCHandlerServer interface {
	mustEmbedUnimplementedStoreGRPCHandlerServer()
}

func RegisterStoreGRPCHandlerServer(s grpc.ServiceRegistrar, srv StoreGRPCHandlerServer) {
	s.RegisterService(&StoreGRPCHandler_ServiceDesc, srv)
}

func _StoreGRPCHandler_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreGRPCHandlerServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StoreGRPCHandler/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreGRPCHandlerServer).Fetch(ctx, req.(*StoreEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreGRPCHandler_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreIDModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreGRPCHandlerServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StoreGRPCHandler/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreGRPCHandlerServer).Show(ctx, req.(*StoreIDModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreGRPCHandler_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreNameModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreGRPCHandlerServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StoreGRPCHandler/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreGRPCHandlerServer).Store(ctx, req.(*StoreNameModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreGRPCHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreGRPCHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StoreGRPCHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreGRPCHandlerServer).Update(ctx, req.(*StoreModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreGRPCHandler_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreIDModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreGRPCHandlerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StoreGRPCHandler/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreGRPCHandlerServer).Destroy(ctx, req.(*StoreIDModel))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreGRPCHandler_ServiceDesc is the grpc.ServiceDesc for StoreGRPCHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreGRPCHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StoreGRPCHandler",
	HandlerType: (*StoreGRPCHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _StoreGRPCHandler_Fetch_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _StoreGRPCHandler_Show_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _StoreGRPCHandler_Store_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StoreGRPCHandler_Update_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _StoreGRPCHandler_Destroy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/store.proto",
}
