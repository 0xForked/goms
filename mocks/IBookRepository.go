// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/bakode/goms/internal/book/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IBookRepository is an autogenerated mock type for the IBookRepository type
type IBookRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, arg
func (_m *IBookRepository) Delete(ctx context.Context, arg *entity.Book) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Book) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: ctx, args
func (_m *IBookRepository) Insert(ctx context.Context, args ...*entity.Book) error {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*entity.Book) error); ok {
		r0 = rf(ctx, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: ctx, args
func (_m *IBookRepository) Select(ctx context.Context, args ...string) ([]*entity.Book, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*entity.Book
	if rf, ok := ret.Get(0).(func(context.Context, ...string) []*entity.Book); ok {
		r0 = rf(ctx, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, arg
func (_m *IBookRepository) Update(ctx context.Context, arg *entity.Book) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Book) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIBookRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBookRepository creates a new instance of IBookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBookRepository(t mockConstructorTestingTNewIBookRepository) *IBookRepository {
	mock := &IBookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
