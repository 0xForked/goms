// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/aasumitro/goms/internal/bff/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IBookGRPCRepository is an autogenerated mock type for the IBookGRPCRepository type
type IBookGRPCRepository struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx, arg
func (_m *IBookGRPCRepository) All(ctx context.Context, arg *entity.Book) ([]*entity.Book, error) {
	ret := _m.Called(ctx, arg)

	var r0 []*entity.Book
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Book) []*entity.Book); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Book) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Erase provides a mock function with given fields: ctx, arg
func (_m *IBookGRPCRepository) Erase(ctx context.Context, arg *entity.Book) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Book) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, arg
func (_m *IBookGRPCRepository) Find(ctx context.Context, arg *entity.Book) (*entity.Book, error) {
	ret := _m.Called(ctx, arg)

	var r0 *entity.Book
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Book) *entity.Book); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Book) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: ctx, arg
func (_m *IBookGRPCRepository) Patch(ctx context.Context, arg *entity.Book) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Book) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Record provides a mock function with given fields: ctx, arg
func (_m *IBookGRPCRepository) Record(ctx context.Context, arg *entity.Book) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Book) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIBookGRPCRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBookGRPCRepository creates a new instance of IBookGRPCRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBookGRPCRepository(t mockConstructorTestingTNewIBookGRPCRepository) *IBookGRPCRepository {
	mock := &IBookGRPCRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
