// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "github.com/aasumitro/goms/pkg/pb"
	mock "github.com/stretchr/testify/mock"
)

// BookGRPCHandlerServer is an autogenerated mock type for the BookGRPCHandlerServer type
type BookGRPCHandlerServer struct {
	pb.UnimplementedBookGRPCHandlerServer
	mock.Mock
}

// Destroy provides a mock function with given fields: _a0, _a1
func (_m *BookGRPCHandlerServer) Destroy(_a0 context.Context, _a1 *pb.BookIDModel) (*pb.BookBoolResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.BookBoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.BookIDModel) *pb.BookBoolResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.BookBoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.BookIDModel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: _a0, _a1
func (_m *BookGRPCHandlerServer) Fetch(_a0 context.Context, _a1 *pb.BookIDModel) (*pb.BookRowsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.BookRowsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.BookIDModel) *pb.BookRowsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.BookRowsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.BookIDModel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Show provides a mock function with given fields: _a0, _a1
func (_m *BookGRPCHandlerServer) Show(_a0 context.Context, _a1 *pb.BookIDModel) (*pb.BookRowResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.BookRowResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.BookIDModel) *pb.BookRowResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.BookRowResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.BookIDModel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *BookGRPCHandlerServer) Store(_a0 context.Context, _a1 *pb.BookAddRequest) (*pb.BookBoolResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.BookBoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.BookAddRequest) *pb.BookBoolResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.BookBoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.BookAddRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *BookGRPCHandlerServer) Update(_a0 context.Context, _a1 *pb.BookModel) (*pb.BookBoolResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.BookBoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.BookModel) *pb.BookBoolResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.BookBoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.BookModel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedBookGRPCHandlerServer provides a mock function with given fields:
func (_m *BookGRPCHandlerServer) mustEmbedUnimplementedBookGRPCHandlerServer() {
	_m.Called()
}

type mockConstructorTestingTNewBookGRPCHandlerServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookGRPCHandlerServer creates a new instance of BookGRPCHandlerServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookGRPCHandlerServer(t mockConstructorTestingTNewBookGRPCHandlerServer) *BookGRPCHandlerServer {
	mock := &BookGRPCHandlerServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
