// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/bakode/goms/pkg/pb"
)

// StoreGRPCHandlerClient is an autogenerated mock type for the StoreGRPCHandlerClient type
type StoreGRPCHandlerClient struct {
	mock.Mock
}

// Destroy provides a mock function with given fields: ctx, in, opts
func (_m *StoreGRPCHandlerClient) Destroy(ctx context.Context, in *pb.StoreIDModel, opts ...grpc.CallOption) (*pb.StoreBoolResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.StoreBoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.StoreIDModel, ...grpc.CallOption) *pb.StoreBoolResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.StoreBoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.StoreIDModel, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, in, opts
func (_m *StoreGRPCHandlerClient) Fetch(ctx context.Context, in *pb.StoreEmptyRequest, opts ...grpc.CallOption) (*pb.StoreRowsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.StoreRowsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.StoreEmptyRequest, ...grpc.CallOption) *pb.StoreRowsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.StoreRowsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.StoreEmptyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Show provides a mock function with given fields: ctx, in, opts
func (_m *StoreGRPCHandlerClient) Show(ctx context.Context, in *pb.StoreIDModel, opts ...grpc.CallOption) (*pb.StoreRowResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.StoreRowResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.StoreIDModel, ...grpc.CallOption) *pb.StoreRowResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.StoreRowResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.StoreIDModel, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, in, opts
func (_m *StoreGRPCHandlerClient) Store(ctx context.Context, in *pb.StoreNameModel, opts ...grpc.CallOption) (*pb.StoreBoolResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.StoreBoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.StoreNameModel, ...grpc.CallOption) *pb.StoreBoolResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.StoreBoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.StoreNameModel, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *StoreGRPCHandlerClient) Update(ctx context.Context, in *pb.StoreModel, opts ...grpc.CallOption) (*pb.StoreBoolResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.StoreBoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.StoreModel, ...grpc.CallOption) *pb.StoreBoolResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.StoreBoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.StoreModel, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStoreGRPCHandlerClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewStoreGRPCHandlerClient creates a new instance of StoreGRPCHandlerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStoreGRPCHandlerClient(t mockConstructorTestingTNewStoreGRPCHandlerClient) *StoreGRPCHandlerClient {
	mock := &StoreGRPCHandlerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
