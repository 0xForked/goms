// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "github.com/bakode/goms/pkg/pb"
	mock "github.com/stretchr/testify/mock"
)

// StoreGRPCHandlerServer is an autogenerated mock type for the StoreGRPCHandlerServer type
type StoreGRPCHandlerServer struct {
	mock.Mock
}

// Destroy provides a mock function with given fields: _a0, _a1
func (_m *StoreGRPCHandlerServer) Destroy(_a0 context.Context, _a1 *pb.StoreIDModel) (*pb.StoreBoolResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.StoreBoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.StoreIDModel) *pb.StoreBoolResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.StoreBoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.StoreIDModel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: _a0, _a1
func (_m *StoreGRPCHandlerServer) Fetch(_a0 context.Context, _a1 *pb.StoreEmptyRequest) (*pb.StoreRowsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.StoreRowsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.StoreEmptyRequest) *pb.StoreRowsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.StoreRowsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.StoreEmptyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Show provides a mock function with given fields: _a0, _a1
func (_m *StoreGRPCHandlerServer) Show(_a0 context.Context, _a1 *pb.StoreIDModel) (*pb.StoreRowResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.StoreRowResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.StoreIDModel) *pb.StoreRowResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.StoreRowResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.StoreIDModel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *StoreGRPCHandlerServer) Store(_a0 context.Context, _a1 *pb.StoreNameModel) (*pb.StoreBoolResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.StoreBoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.StoreNameModel) *pb.StoreBoolResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.StoreBoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.StoreNameModel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *StoreGRPCHandlerServer) Update(_a0 context.Context, _a1 *pb.StoreModel) (*pb.StoreBoolResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.StoreBoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.StoreModel) *pb.StoreBoolResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.StoreBoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.StoreModel) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedStoreGRPCHandlerServer provides a mock function with given fields:
func (_m *StoreGRPCHandlerServer) mustEmbedUnimplementedStoreGRPCHandlerServer() {
	_m.Called()
}

type mockConstructorTestingTNewStoreGRPCHandlerServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewStoreGRPCHandlerServer creates a new instance of StoreGRPCHandlerServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStoreGRPCHandlerServer(t mockConstructorTestingTNewStoreGRPCHandlerServer) *StoreGRPCHandlerServer {
	mock := &StoreGRPCHandlerServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
